// Generated by gencpp from file gmm_map_python/SubmapEntry.msg
// DO NOT EDIT!


#ifndef GMM_MAP_PYTHON_MESSAGE_SUBMAPENTRY_H
#define GMM_MAP_PYTHON_MESSAGE_SUBMAPENTRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace gmm_map_python
{
template <class ContainerAllocator>
struct SubmapEntry_
{
  typedef SubmapEntry_<ContainerAllocator> Type;

  SubmapEntry_()
    : robot_id(0)
    , submap_index(0)
    , submap_version(0)
    , pose()
    , is_frozen(false)  {
    }
  SubmapEntry_(const ContainerAllocator& _alloc)
    : robot_id(0)
    , submap_index(0)
    , submap_version(0)
    , pose(_alloc)
    , is_frozen(false)  {
  (void)_alloc;
    }



   typedef int32_t _robot_id_type;
  _robot_id_type robot_id;

   typedef int32_t _submap_index_type;
  _submap_index_type submap_index;

   typedef int32_t _submap_version_type;
  _submap_version_type submap_version;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef uint8_t _is_frozen_type;
  _is_frozen_type is_frozen;





  typedef boost::shared_ptr< ::gmm_map_python::SubmapEntry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gmm_map_python::SubmapEntry_<ContainerAllocator> const> ConstPtr;

}; // struct SubmapEntry_

typedef ::gmm_map_python::SubmapEntry_<std::allocator<void> > SubmapEntry;

typedef boost::shared_ptr< ::gmm_map_python::SubmapEntry > SubmapEntryPtr;
typedef boost::shared_ptr< ::gmm_map_python::SubmapEntry const> SubmapEntryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gmm_map_python::SubmapEntry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gmm_map_python::SubmapEntry_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gmm_map_python::SubmapEntry_<ContainerAllocator1> & lhs, const ::gmm_map_python::SubmapEntry_<ContainerAllocator2> & rhs)
{
  return lhs.robot_id == rhs.robot_id &&
    lhs.submap_index == rhs.submap_index &&
    lhs.submap_version == rhs.submap_version &&
    lhs.pose == rhs.pose &&
    lhs.is_frozen == rhs.is_frozen;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gmm_map_python::SubmapEntry_<ContainerAllocator1> & lhs, const ::gmm_map_python::SubmapEntry_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gmm_map_python

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gmm_map_python::SubmapEntry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gmm_map_python::SubmapEntry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gmm_map_python::SubmapEntry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gmm_map_python::SubmapEntry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gmm_map_python::SubmapEntry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gmm_map_python::SubmapEntry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gmm_map_python::SubmapEntry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79abe0d217345ac763691defe282e07d";
  }

  static const char* value(const ::gmm_map_python::SubmapEntry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79abe0d217345ac7ULL;
  static const uint64_t static_value2 = 0x63691defe282e07dULL;
};

template<class ContainerAllocator>
struct DataType< ::gmm_map_python::SubmapEntry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gmm_map_python/SubmapEntry";
  }

  static const char* value(const ::gmm_map_python::SubmapEntry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gmm_map_python::SubmapEntry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#每个Submap本质上是一个key frame\n"
"\n"
"int32 robot_id\n"
"int32 submap_index # key frame 在某个机器人内部的 ID\n"
"int32 submap_version # key frame 的版本,主要是在局部轨迹内更新 key frame\n"
"geometry_msgs/Pose pose # key frame的位置, (后端优化会不断优化这个位姿)\n"
"bool is_frozen #主要是判断这个地图是否不会再更新了\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::gmm_map_python::SubmapEntry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gmm_map_python::SubmapEntry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
      stream.next(m.submap_index);
      stream.next(m.submap_version);
      stream.next(m.pose);
      stream.next(m.is_frozen);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SubmapEntry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gmm_map_python::SubmapEntry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gmm_map_python::SubmapEntry_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "submap_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.submap_index);
    s << indent << "submap_version: ";
    Printer<int32_t>::stream(s, indent + "  ", v.submap_version);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "is_frozen: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_frozen);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GMM_MAP_PYTHON_MESSAGE_SUBMAPENTRY_H
