// Generated by gencpp from file gmm_map_python/gmmFrame.msg
// DO NOT EDIT!


#ifndef GMM_MAP_PYTHON_MESSAGE_GMMFRAME_H
#define GMM_MAP_PYTHON_MESSAGE_GMMFRAME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gmm_map_python
{
template <class ContainerAllocator>
struct gmmFrame_
{
  typedef gmmFrame_<ContainerAllocator> Type;

  gmmFrame_()
    : mix_num(0)
    , dim(0)
    , weights()
    , means()
    , covariances()  {
    }
  gmmFrame_(const ContainerAllocator& _alloc)
    : mix_num(0)
    , dim(0)
    , weights(_alloc)
    , means(_alloc)
    , covariances(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _mix_num_type;
  _mix_num_type mix_num;

   typedef int32_t _dim_type;
  _dim_type dim;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _weights_type;
  _weights_type weights;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _means_type;
  _means_type means;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _covariances_type;
  _covariances_type covariances;





  typedef boost::shared_ptr< ::gmm_map_python::gmmFrame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gmm_map_python::gmmFrame_<ContainerAllocator> const> ConstPtr;

}; // struct gmmFrame_

typedef ::gmm_map_python::gmmFrame_<std::allocator<void> > gmmFrame;

typedef boost::shared_ptr< ::gmm_map_python::gmmFrame > gmmFramePtr;
typedef boost::shared_ptr< ::gmm_map_python::gmmFrame const> gmmFrameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gmm_map_python::gmmFrame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gmm_map_python::gmmFrame_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gmm_map_python::gmmFrame_<ContainerAllocator1> & lhs, const ::gmm_map_python::gmmFrame_<ContainerAllocator2> & rhs)
{
  return lhs.mix_num == rhs.mix_num &&
    lhs.dim == rhs.dim &&
    lhs.weights == rhs.weights &&
    lhs.means == rhs.means &&
    lhs.covariances == rhs.covariances;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gmm_map_python::gmmFrame_<ContainerAllocator1> & lhs, const ::gmm_map_python::gmmFrame_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gmm_map_python

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gmm_map_python::gmmFrame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gmm_map_python::gmmFrame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gmm_map_python::gmmFrame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gmm_map_python::gmmFrame_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gmm_map_python::gmmFrame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gmm_map_python::gmmFrame_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gmm_map_python::gmmFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6fab534530edcfec39ab9f7b4278b442";
  }

  static const char* value(const ::gmm_map_python::gmmFrame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6fab534530edcfecULL;
  static const uint64_t static_value2 = 0x39ab9f7b4278b442ULL;
};

template<class ContainerAllocator>
struct DataType< ::gmm_map_python::gmmFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gmm_map_python/gmmFrame";
  }

  static const char* value(const ::gmm_map_python::gmmFrame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gmm_map_python::gmmFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 mix_num\n"
"int32 dim\n"
"float64[] weights\n"
"float64[] means\n"
"float64[] covariances\n"
;
  }

  static const char* value(const ::gmm_map_python::gmmFrame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gmm_map_python::gmmFrame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mix_num);
      stream.next(m.dim);
      stream.next(m.weights);
      stream.next(m.means);
      stream.next(m.covariances);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gmmFrame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gmm_map_python::gmmFrame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gmm_map_python::gmmFrame_<ContainerAllocator>& v)
  {
    s << indent << "mix_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mix_num);
    s << indent << "dim: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dim);
    s << indent << "weights[]" << std::endl;
    for (size_t i = 0; i < v.weights.size(); ++i)
    {
      s << indent << "  weights[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.weights[i]);
    }
    s << indent << "means[]" << std::endl;
    for (size_t i = 0; i < v.means.size(); ++i)
    {
      s << indent << "  means[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.means[i]);
    }
    s << indent << "covariances[]" << std::endl;
    for (size_t i = 0; i < v.covariances.size(); ++i)
    {
      s << indent << "  covariances[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariances[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GMM_MAP_PYTHON_MESSAGE_GMMFRAME_H
