// Generated by gencpp from file gmm_map_python/Submap.msg
// DO NOT EDIT!


#ifndef GMM_MAP_PYTHON_MESSAGE_SUBMAP_H
#define GMM_MAP_PYTHON_MESSAGE_SUBMAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <gmm_map_python/gmmFrame.h>
#include <gmm_map_python/gmmFrame.h>

namespace gmm_map_python
{
template <class ContainerAllocator>
struct Submap_
{
  typedef Submap_<ContainerAllocator> Type;

  Submap_()
    : index(0)
    , robot_id(0)
    , pose_odom()
    , pose()
    , add_time()
    , point_clouds()
    , submap_gmm()
    , freezed(false)
    , descriptor()
    , feature_point()
    , feature_gmm()  {
    }
  Submap_(const ContainerAllocator& _alloc)
    : index(0)
    , robot_id(0)
    , pose_odom(_alloc)
    , pose(_alloc)
    , add_time()
    , point_clouds(_alloc)
    , submap_gmm(_alloc)
    , freezed(false)
    , descriptor(_alloc)
    , feature_point(_alloc)
    , feature_gmm(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _index_type;
  _index_type index;

   typedef int32_t _robot_id_type;
  _robot_id_type robot_id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_odom_type;
  _pose_odom_type pose_odom;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef ros::Time _add_time_type;
  _add_time_type add_time;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _point_clouds_type;
  _point_clouds_type point_clouds;

   typedef  ::gmm_map_python::gmmFrame_<ContainerAllocator>  _submap_gmm_type;
  _submap_gmm_type submap_gmm;

   typedef uint8_t _freezed_type;
  _freezed_type freezed;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _descriptor_type;
  _descriptor_type descriptor;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _feature_point_type;
  _feature_point_type feature_point;

   typedef  ::gmm_map_python::gmmFrame_<ContainerAllocator>  _feature_gmm_type;
  _feature_gmm_type feature_gmm;





  typedef boost::shared_ptr< ::gmm_map_python::Submap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gmm_map_python::Submap_<ContainerAllocator> const> ConstPtr;

}; // struct Submap_

typedef ::gmm_map_python::Submap_<std::allocator<void> > Submap;

typedef boost::shared_ptr< ::gmm_map_python::Submap > SubmapPtr;
typedef boost::shared_ptr< ::gmm_map_python::Submap const> SubmapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gmm_map_python::Submap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gmm_map_python::Submap_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gmm_map_python::Submap_<ContainerAllocator1> & lhs, const ::gmm_map_python::Submap_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.robot_id == rhs.robot_id &&
    lhs.pose_odom == rhs.pose_odom &&
    lhs.pose == rhs.pose &&
    lhs.add_time == rhs.add_time &&
    lhs.point_clouds == rhs.point_clouds &&
    lhs.submap_gmm == rhs.submap_gmm &&
    lhs.freezed == rhs.freezed &&
    lhs.descriptor == rhs.descriptor &&
    lhs.feature_point == rhs.feature_point &&
    lhs.feature_gmm == rhs.feature_gmm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gmm_map_python::Submap_<ContainerAllocator1> & lhs, const ::gmm_map_python::Submap_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gmm_map_python

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gmm_map_python::Submap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gmm_map_python::Submap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gmm_map_python::Submap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gmm_map_python::Submap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gmm_map_python::Submap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gmm_map_python::Submap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gmm_map_python::Submap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc8f35b643c49945d4e0dbf541c537eb";
  }

  static const char* value(const ::gmm_map_python::Submap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc8f35b643c49945ULL;
  static const uint64_t static_value2 = 0xd4e0dbf541c537ebULL;
};

template<class ContainerAllocator>
struct DataType< ::gmm_map_python::Submap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gmm_map_python/Submap";
  }

  static const char* value(const ::gmm_map_python::Submap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gmm_map_python::Submap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 index         # key frame 在某个机器人内部的 ID\n"
"int32 robot_id\n"
"geometry_msgs/Pose pose_odom\n"
"geometry_msgs/Pose pose # key frame的位置, (后端优化会不断优化这个位姿)\n"
"time add_time\n"
"float64[] point_clouds\n"
"gmmFrame submap_gmm\n"
"bool freezed #主要是判断这个地图是否不会再更新了\n"
"float64[] descriptor\n"
"float64[] feature_point\n"
"gmmFrame feature_gmm\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: gmm_map_python/gmmFrame\n"
"int32 mix_num\n"
"int32 dim\n"
"float64[] weights\n"
"float64[] means\n"
"float64[] covariances\n"
;
  }

  static const char* value(const ::gmm_map_python::Submap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gmm_map_python::Submap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.robot_id);
      stream.next(m.pose_odom);
      stream.next(m.pose);
      stream.next(m.add_time);
      stream.next(m.point_clouds);
      stream.next(m.submap_gmm);
      stream.next(m.freezed);
      stream.next(m.descriptor);
      stream.next(m.feature_point);
      stream.next(m.feature_gmm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Submap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gmm_map_python::Submap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gmm_map_python::Submap_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "robot_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "pose_odom: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_odom);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "add_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.add_time);
    s << indent << "point_clouds[]" << std::endl;
    for (size_t i = 0; i < v.point_clouds.size(); ++i)
    {
      s << indent << "  point_clouds[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.point_clouds[i]);
    }
    s << indent << "submap_gmm: ";
    s << std::endl;
    Printer< ::gmm_map_python::gmmFrame_<ContainerAllocator> >::stream(s, indent + "  ", v.submap_gmm);
    s << indent << "freezed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.freezed);
    s << indent << "descriptor[]" << std::endl;
    for (size_t i = 0; i < v.descriptor.size(); ++i)
    {
      s << indent << "  descriptor[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.descriptor[i]);
    }
    s << indent << "feature_point[]" << std::endl;
    for (size_t i = 0; i < v.feature_point.size(); ++i)
    {
      s << indent << "  feature_point[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.feature_point[i]);
    }
    s << indent << "feature_gmm: ";
    s << std::endl;
    Printer< ::gmm_map_python::gmmFrame_<ContainerAllocator> >::stream(s, indent + "  ", v.feature_gmm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GMM_MAP_PYTHON_MESSAGE_SUBMAP_H
