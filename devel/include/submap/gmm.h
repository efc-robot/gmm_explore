// Generated by gencpp from file submap/gmm.msg
// DO NOT EDIT!


#ifndef SUBMAP_MESSAGE_GMM_H
#define SUBMAP_MESSAGE_GMM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>

namespace submap
{
template <class ContainerAllocator>
struct gmm_
{
  typedef gmm_<ContainerAllocator> Type;

  gmm_()
    : header()
    , mix_num(0)
    , prior()
    , x()
    , y()
    , z()
    , x_var()
    , y_var()
    , z_var()
    , pose()  {
    }
  gmm_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mix_num(0)
    , prior(_alloc)
    , x(_alloc)
    , y(_alloc)
    , z(_alloc)
    , x_var(_alloc)
    , y_var(_alloc)
    , z_var(_alloc)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _mix_num_type;
  _mix_num_type mix_num;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _prior_type;
  _prior_type prior;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x_type;
  _x_type x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _y_type;
  _y_type y;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _z_type;
  _z_type z;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x_var_type;
  _x_var_type x_var;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _y_var_type;
  _y_var_type y_var;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _z_var_type;
  _z_var_type z_var;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::submap::gmm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::submap::gmm_<ContainerAllocator> const> ConstPtr;

}; // struct gmm_

typedef ::submap::gmm_<std::allocator<void> > gmm;

typedef boost::shared_ptr< ::submap::gmm > gmmPtr;
typedef boost::shared_ptr< ::submap::gmm const> gmmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::submap::gmm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::submap::gmm_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::submap::gmm_<ContainerAllocator1> & lhs, const ::submap::gmm_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mix_num == rhs.mix_num &&
    lhs.prior == rhs.prior &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.x_var == rhs.x_var &&
    lhs.y_var == rhs.y_var &&
    lhs.z_var == rhs.z_var &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::submap::gmm_<ContainerAllocator1> & lhs, const ::submap::gmm_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace submap

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::submap::gmm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::submap::gmm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::submap::gmm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::submap::gmm_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::submap::gmm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::submap::gmm_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::submap::gmm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b38bee77952a1a686f11267cd2bdf476";
  }

  static const char* value(const ::submap::gmm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb38bee77952a1a68ULL;
  static const uint64_t static_value2 = 0x6f11267cd2bdf476ULL;
};

template<class ContainerAllocator>
struct DataType< ::submap::gmm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "submap/gmm";
  }

  static const char* value(const ::submap::gmm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::submap::gmm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"uint8 mix_num\n"
"float32[] prior\n"
"float32[] x\n"
"float32[] y\n"
"float32[] z\n"
"float32[] x_var\n"
"float32[] y_var\n"
"float32[] z_var  \n"
"geometry_msgs/Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::submap::gmm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::submap::gmm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mix_num);
      stream.next(m.prior);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.x_var);
      stream.next(m.y_var);
      stream.next(m.z_var);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gmm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::submap::gmm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::submap::gmm_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mix_num: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mix_num);
    s << indent << "prior[]" << std::endl;
    for (size_t i = 0; i < v.prior.size(); ++i)
    {
      s << indent << "  prior[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.prior[i]);
    }
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "z[]" << std::endl;
    for (size_t i = 0; i < v.z.size(); ++i)
    {
      s << indent << "  z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.z[i]);
    }
    s << indent << "x_var[]" << std::endl;
    for (size_t i = 0; i < v.x_var.size(); ++i)
    {
      s << indent << "  x_var[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x_var[i]);
    }
    s << indent << "y_var[]" << std::endl;
    for (size_t i = 0; i < v.y_var.size(); ++i)
    {
      s << indent << "  y_var[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y_var[i]);
    }
    s << indent << "z_var[]" << std::endl;
    for (size_t i = 0; i < v.z_var.size(); ++i)
    {
      s << indent << "  z_var[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.z_var[i]);
    }
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUBMAP_MESSAGE_GMM_H
