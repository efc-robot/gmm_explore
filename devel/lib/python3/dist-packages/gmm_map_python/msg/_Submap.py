# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gmm_map_python/Submap.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import gmm_map_python.msg

class Submap(genpy.Message):
  _md5sum = "fc8f35b643c49945d4e0dbf541c537eb"
  _type = "gmm_map_python/Submap"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 index         # key frame 在某个机器人内部的 ID
int32 robot_id
geometry_msgs/Pose pose_odom
geometry_msgs/Pose pose # key frame的位置, (后端优化会不断优化这个位姿)
time add_time
float64[] point_clouds
gmmFrame submap_gmm
bool freezed #主要是判断这个地图是否不会再更新了
float64[] descriptor
float64[] feature_point
gmmFrame feature_gmm
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: gmm_map_python/gmmFrame
int32 mix_num
int32 dim
float64[] weights
float64[] means
float64[] covariances"""
  __slots__ = ['index','robot_id','pose_odom','pose','add_time','point_clouds','submap_gmm','freezed','descriptor','feature_point','feature_gmm']
  _slot_types = ['int32','int32','geometry_msgs/Pose','geometry_msgs/Pose','time','float64[]','gmm_map_python/gmmFrame','bool','float64[]','float64[]','gmm_map_python/gmmFrame']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       index,robot_id,pose_odom,pose,add_time,point_clouds,submap_gmm,freezed,descriptor,feature_point,feature_gmm

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Submap, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.index is None:
        self.index = 0
      if self.robot_id is None:
        self.robot_id = 0
      if self.pose_odom is None:
        self.pose_odom = geometry_msgs.msg.Pose()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.add_time is None:
        self.add_time = genpy.Time()
      if self.point_clouds is None:
        self.point_clouds = []
      if self.submap_gmm is None:
        self.submap_gmm = gmm_map_python.msg.gmmFrame()
      if self.freezed is None:
        self.freezed = False
      if self.descriptor is None:
        self.descriptor = []
      if self.feature_point is None:
        self.feature_point = []
      if self.feature_gmm is None:
        self.feature_gmm = gmm_map_python.msg.gmmFrame()
    else:
      self.index = 0
      self.robot_id = 0
      self.pose_odom = geometry_msgs.msg.Pose()
      self.pose = geometry_msgs.msg.Pose()
      self.add_time = genpy.Time()
      self.point_clouds = []
      self.submap_gmm = gmm_map_python.msg.gmmFrame()
      self.freezed = False
      self.descriptor = []
      self.feature_point = []
      self.feature_gmm = gmm_map_python.msg.gmmFrame()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i14d2I().pack(_x.index, _x.robot_id, _x.pose_odom.position.x, _x.pose_odom.position.y, _x.pose_odom.position.z, _x.pose_odom.orientation.x, _x.pose_odom.orientation.y, _x.pose_odom.orientation.z, _x.pose_odom.orientation.w, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.add_time.secs, _x.add_time.nsecs))
      length = len(self.point_clouds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.point_clouds))
      _x = self
      buff.write(_get_struct_2i().pack(_x.submap_gmm.mix_num, _x.submap_gmm.dim))
      length = len(self.submap_gmm.weights)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.submap_gmm.weights))
      length = len(self.submap_gmm.means)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.submap_gmm.means))
      length = len(self.submap_gmm.covariances)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.submap_gmm.covariances))
      _x = self.freezed
      buff.write(_get_struct_B().pack(_x))
      length = len(self.descriptor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.descriptor))
      length = len(self.feature_point)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.feature_point))
      _x = self
      buff.write(_get_struct_2i().pack(_x.feature_gmm.mix_num, _x.feature_gmm.dim))
      length = len(self.feature_gmm.weights)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.feature_gmm.weights))
      length = len(self.feature_gmm.means)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.feature_gmm.means))
      length = len(self.feature_gmm.covariances)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.feature_gmm.covariances))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose_odom is None:
        self.pose_odom = geometry_msgs.msg.Pose()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.add_time is None:
        self.add_time = genpy.Time()
      if self.submap_gmm is None:
        self.submap_gmm = gmm_map_python.msg.gmmFrame()
      if self.feature_gmm is None:
        self.feature_gmm = gmm_map_python.msg.gmmFrame()
      end = 0
      _x = self
      start = end
      end += 128
      (_x.index, _x.robot_id, _x.pose_odom.position.x, _x.pose_odom.position.y, _x.pose_odom.position.z, _x.pose_odom.orientation.x, _x.pose_odom.orientation.y, _x.pose_odom.orientation.z, _x.pose_odom.orientation.w, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.add_time.secs, _x.add_time.nsecs,) = _get_struct_2i14d2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.point_clouds = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.submap_gmm.mix_num, _x.submap_gmm.dim,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.submap_gmm.weights = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.submap_gmm.means = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.submap_gmm.covariances = s.unpack(str[start:end])
      start = end
      end += 1
      (self.freezed,) = _get_struct_B().unpack(str[start:end])
      self.freezed = bool(self.freezed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.descriptor = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.feature_point = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.feature_gmm.mix_num, _x.feature_gmm.dim,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.feature_gmm.weights = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.feature_gmm.means = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.feature_gmm.covariances = s.unpack(str[start:end])
      self.add_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i14d2I().pack(_x.index, _x.robot_id, _x.pose_odom.position.x, _x.pose_odom.position.y, _x.pose_odom.position.z, _x.pose_odom.orientation.x, _x.pose_odom.orientation.y, _x.pose_odom.orientation.z, _x.pose_odom.orientation.w, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.add_time.secs, _x.add_time.nsecs))
      length = len(self.point_clouds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.point_clouds.tostring())
      _x = self
      buff.write(_get_struct_2i().pack(_x.submap_gmm.mix_num, _x.submap_gmm.dim))
      length = len(self.submap_gmm.weights)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.submap_gmm.weights.tostring())
      length = len(self.submap_gmm.means)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.submap_gmm.means.tostring())
      length = len(self.submap_gmm.covariances)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.submap_gmm.covariances.tostring())
      _x = self.freezed
      buff.write(_get_struct_B().pack(_x))
      length = len(self.descriptor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.descriptor.tostring())
      length = len(self.feature_point)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.feature_point.tostring())
      _x = self
      buff.write(_get_struct_2i().pack(_x.feature_gmm.mix_num, _x.feature_gmm.dim))
      length = len(self.feature_gmm.weights)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.feature_gmm.weights.tostring())
      length = len(self.feature_gmm.means)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.feature_gmm.means.tostring())
      length = len(self.feature_gmm.covariances)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.feature_gmm.covariances.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose_odom is None:
        self.pose_odom = geometry_msgs.msg.Pose()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.add_time is None:
        self.add_time = genpy.Time()
      if self.submap_gmm is None:
        self.submap_gmm = gmm_map_python.msg.gmmFrame()
      if self.feature_gmm is None:
        self.feature_gmm = gmm_map_python.msg.gmmFrame()
      end = 0
      _x = self
      start = end
      end += 128
      (_x.index, _x.robot_id, _x.pose_odom.position.x, _x.pose_odom.position.y, _x.pose_odom.position.z, _x.pose_odom.orientation.x, _x.pose_odom.orientation.y, _x.pose_odom.orientation.z, _x.pose_odom.orientation.w, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.add_time.secs, _x.add_time.nsecs,) = _get_struct_2i14d2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.point_clouds = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 8
      (_x.submap_gmm.mix_num, _x.submap_gmm.dim,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.submap_gmm.weights = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.submap_gmm.means = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.submap_gmm.covariances = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 1
      (self.freezed,) = _get_struct_B().unpack(str[start:end])
      self.freezed = bool(self.freezed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.descriptor = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.feature_point = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 8
      (_x.feature_gmm.mix_num, _x.feature_gmm.dim,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.feature_gmm.weights = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.feature_gmm.means = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.feature_gmm.covariances = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      self.add_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2i14d2I = None
def _get_struct_2i14d2I():
    global _struct_2i14d2I
    if _struct_2i14d2I is None:
        _struct_2i14d2I = struct.Struct("<2i14d2I")
    return _struct_2i14d2I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
