# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gmm_map_python/SubmapEntry.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class SubmapEntry(genpy.Message):
  _md5sum = "79abe0d217345ac763691defe282e07d"
  _type = "gmm_map_python/SubmapEntry"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#每个Submap本质上是一个key frame

int32 robot_id
int32 submap_index # key frame 在某个机器人内部的 ID
int32 submap_version # key frame 的版本,主要是在局部轨迹内更新 key frame
geometry_msgs/Pose pose # key frame的位置, (后端优化会不断优化这个位姿)
bool is_frozen #主要是判断这个地图是否不会再更新了
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['robot_id','submap_index','submap_version','pose','is_frozen']
  _slot_types = ['int32','int32','int32','geometry_msgs/Pose','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_id,submap_index,submap_version,pose,is_frozen

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SubmapEntry, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_id is None:
        self.robot_id = 0
      if self.submap_index is None:
        self.submap_index = 0
      if self.submap_version is None:
        self.submap_version = 0
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.is_frozen is None:
        self.is_frozen = False
    else:
      self.robot_id = 0
      self.submap_index = 0
      self.submap_version = 0
      self.pose = geometry_msgs.msg.Pose()
      self.is_frozen = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i7dB().pack(_x.robot_id, _x.submap_index, _x.submap_version, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.is_frozen))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 69
      (_x.robot_id, _x.submap_index, _x.submap_version, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.is_frozen,) = _get_struct_3i7dB().unpack(str[start:end])
      self.is_frozen = bool(self.is_frozen)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i7dB().pack(_x.robot_id, _x.submap_index, _x.submap_version, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.is_frozen))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 69
      (_x.robot_id, _x.submap_index, _x.submap_version, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.is_frozen,) = _get_struct_3i7dB().unpack(str[start:end])
      self.is_frozen = bool(self.is_frozen)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i7dB = None
def _get_struct_3i7dB():
    global _struct_3i7dB
    if _struct_3i7dB is None:
        _struct_3i7dB = struct.Struct("<3i7dB")
    return _struct_3i7dB
